// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/empresas" | "/empresas/[id]" | "/empresas/[id]/conformidade" | "/empresas/[id]/conformidade/basica" | "/empresas/[id]/conformidade/simples" | "/empresas/[id]/conformidade/teste" | "/normas" | "/normas/[id]" | "/nr6" | "/performance" | "/security" | "/teste" | "/teste-ia"
type AppRouteHandlerRoutes = "/api/alertas" | "/api/alertas/[id]" | "/api/cache" | "/api/conformidade/analisar" | "/api/conformidade/dashboard/[empresaId]" | "/api/conformidade/jobs/[id]" | "/api/conformidade/relatorios/[empresaId]" | "/api/demo/criar-alertas-exemplo" | "/api/demo/criar-dados" | "/api/demo/criar-empresa" | "/api/empresas" | "/api/empresas/[id]" | "/api/empresas/[id]/documentos" | "/api/export" | "/api/extrair-texto" | "/api/health" | "/api/ia/analisar-conformidade" | "/api/normas" | "/api/normas/[id]" | "/api/normas/stats" | "/api/nr6/analisar" | "/api/rate-limit" | "/api/search" | "/api/security" | "/api/security/config" | "/api/security/rate-limit/reset" | "/api/security/stats"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = "/admin"
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin": {}
  "/api/alertas": {}
  "/api/alertas/[id]": { "id": string; }
  "/api/cache": {}
  "/api/conformidade/analisar": {}
  "/api/conformidade/dashboard/[empresaId]": { "empresaId": string; }
  "/api/conformidade/jobs/[id]": { "id": string; }
  "/api/conformidade/relatorios/[empresaId]": { "empresaId": string; }
  "/api/demo/criar-alertas-exemplo": {}
  "/api/demo/criar-dados": {}
  "/api/demo/criar-empresa": {}
  "/api/empresas": {}
  "/api/empresas/[id]": { "id": string; }
  "/api/empresas/[id]/documentos": { "id": string; }
  "/api/export": {}
  "/api/extrair-texto": {}
  "/api/health": {}
  "/api/ia/analisar-conformidade": {}
  "/api/normas": {}
  "/api/normas/[id]": { "id": string; }
  "/api/normas/stats": {}
  "/api/nr6/analisar": {}
  "/api/rate-limit": {}
  "/api/search": {}
  "/api/security": {}
  "/api/security/config": {}
  "/api/security/rate-limit/reset": {}
  "/api/security/stats": {}
  "/empresas": {}
  "/empresas/[id]": { "id": string; }
  "/empresas/[id]/conformidade": { "id": string; }
  "/empresas/[id]/conformidade/basica": { "id": string; }
  "/empresas/[id]/conformidade/simples": { "id": string; }
  "/empresas/[id]/conformidade/teste": { "id": string; }
  "/normas": {}
  "/normas/[id]": { "id": string; }
  "/nr6": {}
  "/performance": {}
  "/security": {}
  "/teste": {}
  "/teste-ia": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
