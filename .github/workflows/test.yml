name: Test Suite

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:  # Permite disparo manual em qualquer branch
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 2: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: |
          npm start &
          sleep 15
          
      - name: Run API tests
        run: |
          # Test health endpoint
          echo "Testing health endpoint..."
          response=$(curl -s http://localhost:3001/api/health)
          echo $response | jq .
          
          # Test normas endpoint
          echo "Testing normas endpoint..."
          response=$(curl -s http://localhost:3001/api/normas?page=1&limit=5)
          echo $response | jq .
          
          # Test normas stats
          echo "Testing normas stats..."
          response=$(curl -s http://localhost:3001/api/normas/stats)
          echo $response | jq .
          
          # Test IA endpoint (if available)
          echo "Testing IA endpoint..."
          curl -s -X POST http://localhost:3001/api/ia/analisar-conformidade \
            -H "Content-Type: application/json" \
            -d '{"empresaId":"test","documentoBase":"test","normasAplicaveis":["NR-6"]}' || echo "IA endpoint not available"
          
      - name: Performance test
        run: |
          echo "Running performance tests..."
          start_time=$(date +%s%N)
          curl -s http://localhost:3001/api/health > /dev/null
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          echo "Health endpoint response time: ${duration}ms"
          
          if [ $duration -gt 5000 ]; then
            echo "Performance test failed: response time too high"
            exit 1
          fi

  # Job 6: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests]
    if: always()
    
    steps:
      - name: Test Summary
        run: |
          echo "## Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Calculate overall status
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.api-tests.result }}" == "success" ]]; then
            echo "| **Overall** | **✅ All tests passed** |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Overall** | **❌ Some tests failed** |" >> $GITHUB_STEP_SUMMARY
          fi
