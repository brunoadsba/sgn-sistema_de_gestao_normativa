#!/bin/bash

# Script para build e deploy do SGN com Docker
# Uso: ./scripts/docker-deploy.sh [environment]

set -e

ENVIRONMENT=${1:-development}
PROJECT_NAME="sgn-sistema-gestao-normativa"

echo "üê≥ Iniciando deploy do SGN com Docker..."
echo "üìã Ambiente: $ENVIRONMENT"

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    exit 1
fi

# Verificar se docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instalando..."
    # Instalar docker-compose se n√£o estiver dispon√≠vel
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

# Criar arquivo .env se n√£o existir
if [ ! -f .env ]; then
    echo "üìù Criando arquivo .env a partir do .env.example..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Por favor, configure as vari√°veis de ambiente no arquivo .env"
fi

# Fun√ß√£o para build da aplica√ß√£o
build_app() {
    echo "üî® Fazendo build da aplica√ß√£o..."
    docker-compose build --no-cache sgn-app
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    echo "üöÄ Iniciando servi√ßos..."
    
    if [ "$ENVIRONMENT" = "production" ]; then
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
    else
        docker-compose up -d
    fi
    
    echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
    sleep 30
    
    # Verificar sa√∫de dos servi√ßos
    echo "üè• Verificando sa√∫de dos servi√ßos..."
    
    # Verificar SGN App
    if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
        echo "‚úÖ SGN App est√° saud√°vel"
    else
        echo "‚ùå SGN App n√£o est√° respondendo"
        docker-compose logs sgn-app
        exit 1
    fi
    
    # Verificar Redis
    if docker-compose exec redis redis-cli ping > /dev/null 2>&1; then
        echo "‚úÖ Redis est√° saud√°vel"
    else
        echo "‚ùå Redis n√£o est√° respondendo"
        exit 1
    fi
}

# Fun√ß√£o para parar servi√ßos
stop_services() {
    echo "üõë Parando servi√ßos..."
    docker-compose down
}

# Fun√ß√£o para limpar volumes e imagens
cleanup() {
    echo "üßπ Limpando volumes e imagens antigas..."
    docker-compose down -v
    docker system prune -f
    docker image prune -f
}

# Fun√ß√£o para mostrar logs
show_logs() {
    echo "üìã Mostrando logs dos servi√ßos..."
    docker-compose logs -f
}

# Fun√ß√£o para mostrar status
show_status() {
    echo "üìä Status dos servi√ßos:"
    docker-compose ps
}

# Menu principal
case "${2:-start}" in
    "build")
        build_app
        ;;
    "start")
        build_app
        start_services
        ;;
    "stop")
        stop_services
        ;;
    "restart")
        stop_services
        start_services
        ;;
    "cleanup")
        cleanup
        ;;
    "logs")
        show_logs
        ;;
    "status")
        show_status
        ;;
    "shell")
        echo "üêö Abrindo shell no container da aplica√ß√£o..."
        docker-compose exec sgn-app sh
        ;;
    *)
        echo "Uso: $0 [environment] [command]"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  build    - Faz build da aplica√ß√£o"
        echo "  start    - Inicia todos os servi√ßos (padr√£o)"
        echo "  stop     - Para todos os servi√ßos"
        echo "  restart  - Reinicia todos os servi√ßos"
        echo "  cleanup  - Remove volumes e imagens antigas"
        echo "  logs     - Mostra logs em tempo real"
        echo "  status   - Mostra status dos servi√ßos"
        echo "  shell    - Abre shell no container da aplica√ß√£o"
        echo ""
        echo "Ambientes dispon√≠veis:"
        echo "  development (padr√£o)"
        echo "  production"
        exit 1
        ;;
esac

echo "‚úÖ Deploy conclu√≠do com sucesso!"
echo "üåê Aplica√ß√£o dispon√≠vel em: http://localhost:3001"
echo "üìä Monitoramento dispon√≠vel em: http://localhost:3000 (Grafana)"
echo "üîç M√©tricas dispon√≠veis em: http://localhost:9090 (Prometheus)"
